/*
 * generated by Xtext 2.13.0
 */
package it.imt.validation

import it.imt.qFLan.SetOfFeatures
import org.eclipse.xtext.validation.Check
import java.util.HashSet
import it.imt.qFLan.Feature
import it.imt.generator.QFLanGenerator
import it.imt.qFLan.QFLanPackage
import it.imt.qFLan.SetOfPossiblyOptionalFeatures
import it.imt.qFLan.SetOfConcreteFeatures
import it.imt.qFLan.RealtionsAmongFeatures
import it.imt.qFLan.XORFatherAndSons
import it.imt.qFLan.ORFatherAndSons
import it.imt.qFLan.FatherAndSons
import it.imt.qFLan.ModelDefinition
import it.imt.qFLan.AbstractFeatures
import it.imt.qFLan.SideEffects
import it.imt.qFLan.QFLanVariable
import it.imt.qFLan.QFLanVariables
import it.imt.qFLan.ConcreteFeatures
import it.imt.qFLan.FeaturePredicates
import it.imt.qFLan.Actions
import it.imt.qFLan.Processes
import it.imt.MyParserUtil
import it.imt.qFLan.FeaturePredicate
import it.imt.qFLan.ProcessDiagram

/**
 * This class contains custom validation rules. 
 *
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#validation
 */
class QFLanValidator extends AbstractQFLanValidator {
	
//	public static val INVALID_NAME = 'invalidName'
//
//	@Check
//	def checkGreetingStartsWithCapital(Greeting greeting) {
//		if (!Character.isUpperCase(greeting.name.charAt(0))) {
//			warning('Name should start with a capital', 
//					QFLanPackage.Literals.GREETING__NAME,
//					INVALID_NAME)
//		}
//	}
	
		
	def duplNames(String name, HashSet<String> allNames, HashSet<String> duplicateNames){
		var ret=allNames.add(name)
		if(!ret){
			duplicateNames.add(name)
		}
	}
	
	@Check
	def checkModel(ModelDefinition model){
		var allNames = new HashSet<String>();
		var duplNames = new HashSet<String>();
		var i=0
		var abstractFeatures= new HashSet<Feature>();
		
		if (!Character.isUpperCase(model.name.charAt(0))) {
			warning('Model name should start with a capital', 
					QFLanPackage.Literals.MODEL_DEFINITION__NAME)
		}
		
		for(elem : model.elements){
			if(elem instanceof QFLanVariables){
				for(f:elem.variables){
					duplNames(f.name,allNames,duplNames)
				}
			}
			else if(elem instanceof AbstractFeatures){
				for(f:elem.abstractFeatures){
					abstractFeatures.add(f)	
					duplNames(QFLanGenerator.getFeatureName(f),allNames,duplNames)
				}
			}
			else if(elem instanceof ConcreteFeatures){
				for(f:elem.concreteFeatures){	
					duplNames(QFLanGenerator.getFeatureName(f),allNames,duplNames)
				}
			}
			else if(elem instanceof RealtionsAmongFeatures){
				var fathers = new HashSet<Feature>()
				for(rel : elem.relations){
					fathers.add(rel.father)
				}
				if(fathers.size < abstractFeatures.size){
					for(f : fathers){
						abstractFeatures.remove(f)
					}
					var dandling = new HashSet<String>()
					for(f: abstractFeatures){
						dandling.add(QFLanGenerator.getFeatureName(f))
					}
					var msg = dandling.toString
					msg = msg.substring(1,msg.length-1)
					if(dandling.size==1){
						msg = 'Abstract feature not appearing as source of a relation: '+msg	
					}
					else{
						msg = 'Abstract features not appearing as source of a relation: '+msg
					}
					
					error(msg,QFLanPackage.eINSTANCE.modelDefinition_Name)
					//error(msg,QFLanPackage.eINSTANCE.modelDefinition_Elements,i)
				}
			}
			else if(elem instanceof FeaturePredicates){
				for(f:elem.featurePredicates){	
					duplNames(f.name,allNames,duplNames)
				}
			}
			else if(elem instanceof Actions){
				for(f:elem.actions){	
					duplNames(f.name,allNames,duplNames)
				}
			}
			else if(elem instanceof Processes){
				for(f:elem.processDefinitions){	
					duplNames(f.name,allNames,duplNames)
				}
			}
			else if(elem instanceof ProcessDiagram){
				for(f:elem.processes){	
					duplNames(f.name,allNames,duplNames)
					for(s:f.states.states){
						duplNames(s.name,allNames,duplNames)
					}
				}
			}
			i++;
		}
		
		if(duplNames.size>0){
			var msg = duplNames.toString
			msg = msg.substring(1,msg.length-1)
			if(duplNames.size==1){
				msg = 'Resolve the following duplicate name: '+msg	
			}
			else{
				msg = 'Resolve the following duplicate names: '+msg	
			}
			error(msg,QFLanPackage.eINSTANCE.modelDefinition_Name)
		}
		for(n:allNames){
			if(isReserved(n)){
				var msg= 'Name '+n+' is reserved'
				error(msg,QFLanPackage.eINSTANCE.modelDefinition_Name)
			}
		}
	}
	
	def isReserved(String n) {
		var nl = n.trim;
		if(MyParserUtil.RESERVEDKEYWORDS.contains(nl)){
			return true
		}
		else{
			return false
		}
	}
	
	
	@Check
	def checkFeaturesRelations(RealtionsAmongFeatures rels){
		var fathers = new HashSet<Feature>();
		var sons = new HashSet<Feature>();
		var duplicateFathers = new HashSet<String>();
		var duplicateSons = new HashSet<String>();
		var j=0;
		var posf=-1
		var poss=-1
		for(rel : rels.relations){
			var ret=fathers.add(rel.father)
			if(!ret){
				duplicateFathers.add(QFLanGenerator.getFeatureName(rel.father));
				posf=j
			}
			if(rel instanceof XORFatherAndSons){
				var sSet = rel.sonsSet
				for(s : sSet.features){
					var rets = sons.add(s)
					if(!rets){
						duplicateSons.add(QFLanGenerator.getFeatureName(s));
						poss=j
					}
				}
			}
			else if(rel instanceof ORFatherAndSons){
				var sSet = rel.sonsSet
				for(s : sSet.features){
					var rets = sons.add(s)
					if(!rets){
						duplicateSons.add(QFLanGenerator.getFeatureName(s));
						poss=j
					}
				}
			} 
			else if(rel instanceof FatherAndSons){
				var sSet = rel.sonsSet
				for(ps : sSet.features){
					var s = ps.optionalFeature
					if(s===null){
						s=ps.mandatoryFeature
					}
					var rets = sons.add(s)
					if(!rets){
						duplicateSons.add(QFLanGenerator.getFeatureName(s));
						poss=j
					}
				}
			} 
			j++;
		}
		
		if(!duplicateFathers.isEmpty){
  			var msg = duplicateFathers.toString
		  	msg = msg.substring(1,msg.length-1)
		  	if(duplicateFathers.size==1){
		 		msg = 'Feature appearing more than once as source: '+msg
		  	}
		  	else{
		  		msg = 'Features appearing more than once as source: '+msg
		  	}
		  	error(msg,QFLanPackage.eINSTANCE.realtionsAmongFeatures_Relations,posf)
  		}
  		if(!duplicateSons.isEmpty){
  			var msg = duplicateSons.toString
		  	msg = msg.substring(1,msg.length-1)
		  	if(duplicateSons.size==1){
		 		msg = 'Feature appearing more than once as target: '+msg
		  	}
		  	else{
		  		msg = 'Features appearing more than once as target: '+msg
		  	}
		  	error(msg,QFLanPackage.eINSTANCE.realtionsAmongFeatures_Relations,poss)
  		}
	}
	
	@Check
	def checkSideEffects(SideEffects effects){
		var mySet = new HashSet<QFLanVariable>(effects.effects.size)
		var duplicates = new HashSet<String>()
		var pos=-1
		var j=0
		for(eff : effects.effects){
			var ret = mySet.add(eff.refToQFLanVar.varqflan)
			if(!ret){
				duplicates.add(eff.refToQFLanVar.varqflan.name)
				pos=j
			}
			j++
		}
		if(pos!=-1){
  			var msg = duplicates.toString
		  	msg = msg.substring(1,msg.length-1)
		  	if(duplicates.size==1){
		 		msg = 'Duplicate variable '+msg
		  	}
		  	else{
		  		msg = 'Duplicate variables '+msg
		  	}
		  	error(msg,QFLanPackage.eINSTANCE.sideEffects_Effects,pos)
  		}
	}
	
	@Check
	def isASet(FeaturePredicate s){
		var mySet = new HashSet<Feature>()
		var duplicates = new HashSet<String>()
		var pos=-1;
		var j=0;
		for(f : s.values){
			var ret = mySet.add(f.feature)
			if(!ret){
				duplicates.add(QFLanGenerator.getFeatureName(f.feature))
				pos=j
			}
			j++;
		}
		if(pos!=-1){
  			var msg = duplicates.toString
		  	msg = msg.substring(1,msg.length-1)
		  	if(duplicates.size==1){
		 		msg = 'Duplicate feature value'+msg
		  	}
		  	else{
		  		msg = 'Duplicate feature values'+msg
		  	}
		  	error(msg,QFLanPackage.eINSTANCE.featurePredicate_Values,pos)
  		}
	}
	
	
	@Check
	def isASet(SetOfFeatures s){
		var mySet = new HashSet<Feature>()
		var duplicates = new HashSet<String>()
		var pos=-1;
		var j=0;
		for(f : s.features){
			var ret = mySet.add(f)
			if(!ret){
				duplicates.add(QFLanGenerator.getFeatureName(f))
				pos=j
			}
			j++;
		}
		if(pos!=-1){
  			var msg = duplicates.toString
		  	msg = msg.substring(1,msg.length-1)
		  	if(duplicates.size==1){
		 		msg = 'Duplicate feature '+msg
		  	}
		  	else{
		  		msg = 'Duplicate features '+msg
		  	}
		  	error(msg,QFLanPackage.eINSTANCE.setOfFeatures_Features,pos)
  		}
	}
	
	@Check
	def isASet(SetOfConcreteFeatures s){
		var mySet = new HashSet<Feature>()
		var duplicates = new HashSet<String>()
		var pos=-1;
		var j=0;
		for(f : s.features){
			var ret = mySet.add(f)
			if(!ret){
				duplicates.add(QFLanGenerator.getFeatureName(f))
				pos=j
			}
			j++;
		}
		if(pos!=-1){
  			var msg = duplicates.toString
		  	msg = msg.substring(1,msg.length-1)
		  	if(duplicates.size==1){
		 		msg = 'Duplicate feature '+msg
		  	}
		  	else{
		  		msg = 'Duplicate features '+msg
		  	}
		  	error(msg,QFLanPackage.eINSTANCE.setOfConcreteFeatures_Features,pos)
  		}
	}
	
	@Check
	def isASet(SetOfPossiblyOptionalFeatures s){
		var mySet = new HashSet<Feature>()
		var duplicates = new HashSet<String>()
		var pos=-1;
		var j=0;
		for(pf : s.features){
			var f = pf.optionalFeature
			if(f===null){
				f=pf.mandatoryFeature
			}
			var ret = mySet.add(f)
			if(!ret){
				duplicates.add(QFLanGenerator.getFeatureName(f))
				pos=j
			}
			j++;
		}
		if(pos!=-1){
  			var msg = duplicates.toString
		  	msg = msg.substring(1,msg.length-1)
		  	if(duplicates.size==1){
		 		msg = 'Duplicate feature '+msg
		  	}
		  	else{
		  		msg = 'Duplicate features '+msg
		  	}
		  	error(msg,QFLanPackage.eINSTANCE.setOfPossiblyOptionalFeatures_Features,pos)
  		}
	}
}

/*
 * generated by Xtext 2.13.0
 */
package it.imt.ui.contentassist

import org.eclipse.xtext.ui.editor.contentassist.ContentAssistContext
import org.eclipse.xtext.ui.editor.contentassist.ConfigurableCompletionProposal
import org.eclipse.swt.widgets.FileDialog
import org.eclipse.xtext.ui.editor.contentassist.ReplacementTextApplier

import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.ui.editor.contentassist.ICompletionProposalAcceptor;
import org.eclipse.xtext.RuleCall;

/**
 * See https://www.eclipse.org/Xtext/documentation/304_ide_concepts.html#content-assist
 * on how to customize the content assistant.
 */
class QFLanProposalProvider extends AbstractQFLanProposalProvider {


	override completeSimulate_File(EObject model, Assignment assignment, ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
		acceptor.accept(pickAFilePrivate(context,"Pick a file..."));
		super.completeSimulate_File(model, assignment, context, acceptor)
	}
	
	override completeAnalysis_QueryFile(EObject model, Assignment assignment, ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
		acceptor.accept(pickAFilePrivate(context,"Pick a file..."));
		super.completeAnalysis_QueryFile(model, assignment, context, acceptor)
	}
	
	def pickAFilePrivate(ContentAssistContext context,String text){
		pickAFilePrivate(context,text,null)
	}
	
	def pickAFilePrivate(ContentAssistContext context,String text, String[] filterExtensions){
		var pickFile = createCompletionProposal(text,context) as ConfigurableCompletionProposal;
		if(pickFile!==null){
			pickFile.textApplier = new ReplacementTextApplier(){
				override getActualReplacementString(ConfigurableCompletionProposal proposal) {
					var display = context.getViewer().getTextWidget().getDisplay();
					var dialog = new FileDialog(display.getActiveShell())
					if(filterExtensions!==null && filterExtensions.length>0){
						dialog.filterExtensions = filterExtensions	
					}
					dialog.overwrite = true;
					//DirectoryDialog
                    var absFileName = dialog.open();
                    if(absFileName!==null){
                    	return "\""+absFileName+"\"";	
                    }
                    else{
                    	//return "\"NONE\"";
                    	return "";
                    } 
        			/*
        			var display = context.getViewer().getTextWidget().getDisplay();
        			var colorDialgo = new ColorDialog(display.getActiveShell());
        			var newColor = fileDialog.open();
        			return "\"" + newColor.red + "," + newColor.green + "," + newColor.blue + "\"";*/
				}
			}
		}
		return pickFile
	}
	
	/*public void completeAnalysis_Alpha(EObject model, Assignment assignment, ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
		completeRuleCall(((RuleCall)assignment.getTerminal()), context, acceptor);
	}*/
	override completeAnalysis_Alpha(EObject model, Assignment assignment, ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
		acceptor.accept(createCompletionProposal('0.1', context))
		super.completeAnalysis_Alpha(model, assignment, context, acceptor)
	}
	override completeAnalysis_Delta(EObject model, Assignment assignment, ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
		acceptor.accept(createCompletionProposal('\"0.1\"', context))
		super.completeAnalysis_Delta(model, assignment, context, acceptor)
	}	
	override complete_NONNEGATIVEREAL(EObject model, RuleCall ruleCall, ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
		super.complete_NONNEGATIVEREAL(model, ruleCall, context, acceptor)
		acceptor.accept(createCompletionProposal('1.0', context))
	}
	override complete_NAT(EObject model, RuleCall ruleCall, ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
		super.complete_NAT(model, ruleCall, context, acceptor)
		acceptor.accept(createCompletionProposal('1', context))
	}
	override complete_POSITIVEINTORREAL(EObject model, RuleCall ruleCall, ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
		complete_NONNEGATIVEREAL(model, ruleCall, context, acceptor)
	}
	override complete_NONNEGATIVEINTORREAL(EObject model, RuleCall ruleCall, ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
		complete_NONNEGATIVEREAL(model, ruleCall, context, acceptor)
	}
	/*override complete_NEGATIVEINTORREAL(EObject model, RuleCall ruleCall, ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
		complete_NONNEGATIVEREAL(model, ruleCall, context, acceptor)
	}*/
	override complete_ZERO(EObject model, RuleCall ruleCall, ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
		super.complete_ZERO(model, ruleCall, context, acceptor)
		acceptor.accept(createCompletionProposal('0', context))
	}
	
	override complete_Comp(EObject model, RuleCall ruleCall, ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
		super.complete_Comp(model, ruleCall, context, acceptor)
		acceptor.accept(createCompletionProposal('<', context))
		acceptor.accept(createCompletionProposal('>', context))
		acceptor.accept(createCompletionProposal('<=', context))
		acceptor.accept(createCompletionProposal('>=', context))
		acceptor.accept(createCompletionProposal('==', context))
		acceptor.accept(createCompletionProposal('!=', context))
	}
	
	override complete_PrimaryBooleanConstraintExpr(EObject model, RuleCall ruleCall, ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
		super.complete_PrimaryBooleanConstraintExpr(model, ruleCall, context, acceptor)
		acceptor.accept(createCompletionProposal('true', context))
		acceptor.accept(createCompletionProposal('false', context))
	}
}
